Nama        : Neng Santi
Kelas       : TIF RM 16 B
NIM         : 16 111 229
Mata Kuliah : Algoritma Pemrograman 2
"Tugas Elearning Pertemuan 10"

Binary Search (pencarian bagi dua)
   Binary search adalah sebuah algoritma pemrograman dengan
cara membagi dua data menjadi dua bagian setiap kali terjadi 
proses pencarian untuk menemukan nilai tertentu dalam sebuah 
larik (array) linear. Sebuah pencarian biner mencari nilai 
tengah (median), melakukan sebuah perbandingan untuk menentu-
kan apakah  nilai yang dicari ada sebelum atau sesudahnya, 
kemudian mencari setengah sisanya dengan cara yang sama. 
   Pencarian binary (binary search) dilakukan untuk :
1. Memperkecil jumlah operasi pembadingan yang harus dilaku-
   kan antara data yang dicari dengan data yang ada dalam 
   tabel, khususnya untuk jumlah data yang sangat besar ukuran-
   nya 
2. Beban komputasi juga lebih kecil karena pencarian dilakukan 
   dari depan, belakang, dan tengah
3. Syarat utama untuk pencarian biner adalah data di dalam 
   tabel harus sudah terurut.
  Sebenarnya binary search ini sering kita terapkan pada 
kehidupan kita sehari-hari. Sebagai salah satu contoh nya 
yaitu, Saat kita mencari kata di kamus maka kita akan membuka 
buku itu menjadi dua bagian, dan membuka nya lagi menjadi dua 
bagian dan seterus nya sampai ketemu, bagaimana jika kita 
ingin mencari suatu kata di kamus dengan menggunakan metode 
linear search ? tentu akan sangat lama, karena linear search 
konsep pencarian dengan beruntun dari halaman pertama sampai 
terakhir dan sebalik nya secara terurut, jadi tidak mungkin 
mencarinya dengan linear search.
   Kelebihan dari binary search itu sendiri adalah untuk 
pencarian data yang jumlahnya banyak, waktu pencarian relatif
cepat. Sehingga metode pencarian dengan menggunakan binary 
sort banyak digunakan. Dan kekurangan dari binary search yaitu 
data harus disorting dahulu dan algoritma lebih rumit.
   Proses yang terjadi pada pencarian dengan metode ini 
adalah sebagai berikut :
  1. Membaca Array data
  2. Apabila Array belum terurut maka array diurutkan terlebih
     dahulu.
  3. Menentukan data yang akan dicari
  4. Menentukan elemen tengah dari array
  5. Jika nilai elemen tengah sama dengan data yang dicari, 
     maka pencarian berhenti.
  6. Jika elemen tengah tidak sama dengan data yang dicari 
     maka :
     a. Jika nilai elemen tengah > data yang dicari maka 
        pencarian dilakukan pada setengah array pertama.
     b. Jika nilai elemen tengah lebih kecil dari pada data 
        yang dicari maka pencarian dilakukan pada setengah 
        array berikutnya.
  Prinsip dasarnya adalah melakukan proses pembagian ruang 
pencarian secara berulang-ulang sampai data ditemukan atau 
sampai ruang pencarian tidak dapat dibagi lagi (berarti ada 
kemungkinan data tidak ditemukan), atau lebih jelasnya sebagai
berikut:
  1. Tentukan posisi awal = 0 dan posisi akhir = N-1.
  2. Hitung posisi tengah = (posisi awal + posisi akhir)/2.
  3. Bandingkan data yang dicari dengan elemen posisi tengah.
    - Jika sama maka catat posisi dan cetak kemudian berhenti.
    - Jika lebih besar maka akan dilakukan pencarian kembali 
      kebagian kanan dengan posisi awal = p posisi tengah +1 
      dan posisi akhir tetap kemudian ulangi mulai poin 2.
    - Jika lebih kecil maka akan di lakukan pencarian kembali 
      ke bagian kiri dengan nilai posisi awal t tetap dan 
      nilai posisi akhir  = posisi tengah-1 kemudian ulangi 
      mulai poin 2. 
(i)Misalkan, yang pertama kita mempunyai sederatan data dalam 
array nilai sebanyak 10 elemen dan akan dilakukan pencarian 
data 87 terhadap array.
-Nilai[0..9] = 12,45,23,87,90,55,15,25,40,21
 (Urutkan elemen array secara menaik, sehingga diperoleh) :
 Nilai[0..9] = 12,15,21,23,25,40,45,55,87,90
-Data yang akan dicari = 87(bilangan)
-Tentukan nilai awal = 0, akhir = N-1=9
   Hitung tengah = (9+0)/2=4
   Bandingkan Bilangan < Nilai[tengah]->87=25->false
   Bandingkan Bilangan < Nilai[tengah]->87<25->false
   Bandingkan Bilangan < Nilai[tengah]->87>25->true maka 
   pencarian dilakukan ke sebelah kanan dengan nilai awal = 
   tengah+1 = 5
(Karena awal masih lebih kecil dari akhir maka ulangi kembali 
mulai menghitung tengah)
-Hitung tengah = (9+5)/2=7
   Bandingkan Bilangan < Nilai[tengah] ->87=55->false
   Bandingkan Bilangan < Nilai[Tengah]->87<55->false
   Bandingkan Bilangan < Nilai[tengah]->87>55->true maka 
   pencarian dilakukan ke sebelah kanan dengan nilai awal = 
   tengah+1 = 8
(Karena awal masih lebih kecil dari akhir maka ulangi kembali 
mulai menghitung tengah)
-Hitung tengah = (9+8)/2 = 8
   Bandingkan Bilangan < Nilai[tengah]->87=87->true
   Karena sudah di tentukan hasilnya maka proses pencarian 
   berhenti.

(ii)Misalkan, yang ke-dua kita mempunyai data sebagai berikut: 
{-5, -3, -1, 0, 1, 3, 5, 7}. Data yang kita cari adalah 5. 
Untuk menyelesaikan soal diatas, maka diselesaikan dengan 
cara berikut :
-Nilai[0..8] = -5, -3, -1, 0, 1, 3, 5, 7
 (Urutkan elemen array secara menaik, sehingga diperoleh:)
 Nilai[0..8] = -5, -3, -1, 0, 1, 3, 5, 7
-Data yang akan dicari = 5(bilangan)
-Tentukan nilai awal = 0, akhir = N-1=7
   Hitung tengah = (7+0)/2=3
   Bandingkan Bilangan < Nilai[tengah]->5=0->false
   Bandingkan Bilangan < Nilai[tengah]->5<0->false
   Bandingkan Bilangan < Nilai[tengah]->5>0->true maka 
   pencarian dilakukan ke sebelah kanan dengan nilai awal = 
   tengah+1 = 4
(Karena awal masih lebih kecil dari akhir maka ulangi kembali 
mulai menghitung tengah)
-Hitung tengah = (7+4)/2=5
   Bandingkan Bilangan  < Nilai[tengah] ->5=5->true
Karena sudah di tentukan hasilnya maka proses pencarian 
berhenti.

(iii)Misalkan, yang ke-tiga, kita mempunyai sederatan data 
dalam array nilai sebanyak 10 elemen dan akan dilakukan 
pencarian data 7 terhadap array.
-Nilai[0..9] = 4,5,9,8,3,2,1,10,6,7
 (Urutkan elemen array secara menaik, sehingga diperoleh) :
 Nilai[0..9] = 1,2,3,4,5,6,7,8,9,10
-Data yang akan dicari = 7(bilangan)
-Tentukan nilai awal = 0, akhir = N-1=9
   Hitung tengah = (9+0)/2=4
   Bandingkan Bilangan < Nilai[tengah]->7=4->false
   Bandingkan Bilangan < Nilai[tengah]->7<4->false
   Bandingkan Bilangan < Nilai[tengah]->7>4->true maka 
   pencarian dilakukan ke sebelah kanan dengan nilai awal = 
   tengah+1 = 5
(Karena awal masih lebih kecil dari akhir maka ulangi kembali 
mulai menghitung tengah)
-Hitung tengah = (9+5)/2=7
   Bandingkan Bilangan  < Nilai[tengah] ->7=7->true
Karena sudah di tentukan hasilnya maka proses pencarian
berhenti.
  
  Berikut adalah program sederhana binary search(pencarian 
bagi dua) dengan C++:
#include <iostream.h> 
#include <conio.h> 

main () 
{ 
    int jd, cari,no, kiri,kanan,tengah,data[50]; 

   cout<<"\n\t\t *************************************** \n"; 
   cout<<"\t\t | \t\t\t\t       | \n"; 
   cout<<"\t\t | \t     Proses Pencarian \t       | \n"; 
   cout<<"\t\t | Menggunakan Algoritma Binary Search | \n"; 
   cout<<"\t\t | \t\t\t\t       | \n"; 
   cout<<"\t\t *************************************** \n\n\n"
; 

   cout<<" Input Jumlah Data  : "; 
   cin>>jd; 

   cout<<endl; 
    for (no=0;no<jd;no++) 
    { 
        cout<<" Input Data Ke-"<<(no+1)<<"    : "; 
       cin>>data[no]; 
    } 

   cout<<endl; 
    cout<<" Input Nilai Dicari : "; 
    cin>>cari; 

    kiri=0; 
    kanan=jd-1; 
    tengah=(kanan-kiri)/2; 

    while ((data[tengah]!=cari) && (kiri>=0)&& (kanan<jd) && 
    (kanan>=kiri)) 
    { 
        if (cari>data[tengah]) 
       { 
           kiri=tengah+1; 
       } 
       else if (cari<data[tengah]) 
       { 
           kanan=tengah-1; 
       } 
       tengah=kiri+(kanan-kiri)/2; 
    } 

   cout<<endl; 
   if (data[tengah]==cari) 
    { 
        cout<<" Keterangan         : Data Ditemukan"; 
    } 
    else 
    { 
        cout<<" Keterangan         : Data Tidak Ditemukan"; 
    } 

    getch(); 
}
